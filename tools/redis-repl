#!/usr/bin/env -S NODE_ENV=development node
const redis = require('redis');
const redisVersion = require('../node_modules/redis/package.json').version;
const config = require('../app/models/config-model').server.redis.main;
const { REPLServer } = require('repl');

const log = (...args) => console.error('[redis-repl]', ...args);

log(`Connecting to redis at ${config.host}:${config.port}...`);
const client = redis.createClient(config.port, config.host, { auth_pass: config.password });
client.on('error', (err) => log('Redis client error:', err));
client.on('end', () => log('Redis client closed') || process.exit());

client.on('connect', async () => {
  log('Connected.');

  const predefs = [
    [ client,      'client',   'client',         'Redis client.' ],
    [ listKeys,    'listKeys', 'listKeys()',     'Show all keys in the database.' ],
    [ get,         'get',      'await get(key)', 'Get something from the database.' ],
    [ describeKey, 'describe', 'describe(key)',  'Get something from the database.' ],
    [ printUsage,  'help',     'help()',         'Show this message.' ],
  ];

  printUsage();

  const repl = new REPLServer({ prompt:'redis> ' });
  repl.on('exit', () => client.end(true));

  await new Promise((resolve, reject) => repl.setupHistory('tools/.redis-repl.history', err => err ? reject(err) : resolve()));

  predefs
      .forEach(([ value, varName ]) => {
        repl.context[varName] = value;
      });

  function printUsage() {
    console.log(`\nnode-redis docs: https://github.com/redis/node-redis/tree/v${redisVersion}#usage`);

    console.log('\nAvailable globals:\n');
    const cmdPad = 1 + predefs.reduce((acc, p) => Math.max(acc, p[2].length), 0);
    predefs
        .forEach(([ , , cmd, description ]) => {
          console.log(' ', cmd.padEnd(cmdPad, ' '), description);
        });
    console.log();
  }

  function get(key) {
    return replCmd(
      wrapper => {
        if(key === 'submission:counter') {
          return client.get(key, wrapper);
        }
        switch(key.split(':')[0]) {
          case 'ca':
          case 'id':
            return client.hgetall(key, wrapper);
          case 'su':
            return client.lrange(key, 0, -1, wrapper);
          case 'or':
            return client.get(key, wrapper);
          default: throw new Error(`No handling yet for keys like: '${key}'`);
        }
      },
      res => res,
    );
  }

  function describeKey(key) {
    if(key === 'submission:counter') {
      return console.log('This is the total count of form submissions to this enketo-express instance.');
    }
    switch(key.split(':')[0]) {
      case 'ca': return console.log('ca:<open-rosa-server>,<open-rosa-id>  enketo-transformer result.');
      case 'or': return console.log('or:<open-rosa-server>,<open-rosa-id>  Enketo ID.');
      case 'id': return console.log('id:<enketo-id>  Enketo SurveyObject.');
      case 'su': return console.log('su:<enketo-id>  Submission IDs.');
      default: throw new Error(`No description yet for keys like: '${key}'`);
    }
  }

  function listKeys() {
    return replCmd(
      wrapper => client.multi().keys('*').exec(wrapper),
      ([ keys ]) => {
        keys.sort();

        console.log('\n\nKeys in database:\n');
        keys.forEach(k => console.log(' ', k));
        console.log();
      },
    );
  }

  function replCmd(fn, resultHandler) {
    return new Promise((resolve, reject) => {
      repl.clearBufferedCommand();
      fn((err, res) => {
        if(err) {
          log('Error:', err);
          repl.displayPrompt();
          return reject(err);
        }

        resultHandler(res);
        repl.displayPrompt();

        return resolve(res);
      });
    });
  }
});
